{"version":3,"sources":["plot.png","App.js","reportWebVitals.js","index.js"],"names":["globalTheme","createMuiTheme","overrides","MuiButton","root","textTransform","Step","children","Box","className","StepHeader","props","StepForm","StepButtonsContainer","FormContentWrapper","FirstStep","goToNextStep","type","name","Button","variant","color","endIcon","onClick","columns","field","headerName","rows","column","id","SecondStep","style","height","pageSize","checkboxSelection","ThirdStep","FormControl","component","FormGroup","FormControlLabel","control","Checkbox","label","ForthStep","TextField","fullWidth","FifthStep","useEffect","timeout","setTimeout","clearTimeout","display","alignItems","CircularProgress","marginRight","LastStep","goToFirstStep","src","plotSrc","alt","width","App","useState","step","setStep","prevStep","console","log","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.214e886f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/plot.46f7eeb0.png\";","import { useEffect, useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport NavigateNext from '@material-ui/icons/NavigateNext';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport plotSrc from './plot.png';\n\nimport 'fontsource-roboto';\nimport './App.css';\n\nconst globalTheme = createMuiTheme({\n    overrides: {\n        MuiButton: {\n            root: {\n                textTransform: 'none',\n            },\n        },\n    },\n});\n\nconst Step = ({ children }) => {\n    return (\n        <Box>\n            <div className=\"step\">{children}</div>\n        </Box>\n    );\n};\n\nconst StepHeader = (props) => {\n    // eslint-disable-next-line jsx-a11y/heading-has-content\n    return <h2 className=\"step-header\" {...props} />;\n};\n\nconst StepForm = (props) => {\n    return <form className=\"step-form\" {...props} />;\n};\n\nconst StepButtonsContainer = (props) => {\n    return <div className=\"step-button-container\" {...props}></div>;\n};\n\nconst FormContentWrapper = (props) => {\n    return <div className=\"form-content-wrapper\" {...props} />;\n};\n\nconst FirstStep = ({ goToNextStep }) => {\n    return (\n        <Step>\n            <div className=\"step-1\">\n                <StepHeader>Загрузите файл с данными</StepHeader>\n                <StepForm>\n                    <FormContentWrapper>\n                        <input type=\"file\" name=\"tableFile\" />\n                    </FormContentWrapper>\n                    <StepButtonsContainer>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                            Загрузить\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            endIcon={<NavigateNext />}\n                            onClick={goToNextStep}\n                            type=\"button\"\n                        >\n                            На следующий шаг\n                        </Button>\n                    </StepButtonsContainer>\n                </StepForm>\n            </div>\n        </Step>\n    );\n};\n\nconst columns = [{ field: 'column', headerName: 'Столбцы' }];\n\nconst rows = [\n    { column: 'column1', id: 'column1' },\n    { column: 'column2', id: 'column2' },\n    { column: 'column3', id: 'column3' },\n    { column: 'column4', id: 'column4' },\n    { column: 'column5', id: 'column5' },\n    { column: 'column6', id: 'column6' },\n    { column: 'column7', id: 'column7' },\n    { column: 'column8', id: 'column8' },\n    { column: 'column9', id: 'column9' },\n];\n\nconst SecondStep = ({ goToNextStep }) => {\n    return (\n        <Step>\n            <div className=\"step-2\">\n                <StepHeader>Выберите столбцы для обработки</StepHeader>\n                <StepForm>\n                    <FormContentWrapper>\n                        <div style={{ height: '400px' }}>\n                            <DataGrid\n                                rows={rows}\n                                columns={columns}\n                                pageSize={5}\n                                checkboxSelection\n                            />\n                        </div>\n                    </FormContentWrapper>\n                </StepForm>\n                <StepButtonsContainer>\n                    <Button variant=\"contained\" color=\"primary\">\n                        Выбрать\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        endIcon={<NavigateNext />}\n                        onClick={goToNextStep}\n                    >\n                        На следующий шаг\n                    </Button>\n                </StepButtonsContainer>\n            </div>\n        </Step>\n    );\n};\n\nconst ThirdStep = ({ goToNextStep }) => {\n    return (\n        <Step>\n            <div className=\"step-3\">\n                <StepHeader>Выберите методы</StepHeader>\n                <StepForm>\n                    <FormContentWrapper>\n                        <FormControl component=\"fieldset\">\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={<Checkbox name=\"regression\" color=\"primary\" />}\n                                    label=\"Linear Regression\"\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox name=\"trees\" color=\"primary\" />}\n                                    label=\"Trees\"\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox name=\"neural\" color=\"primary\" />}\n                                    label=\"Neural Net\"\n                                />\n                            </FormGroup>\n                        </FormControl>\n                    </FormContentWrapper>\n                    <StepButtonsContainer>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                            Выбрать\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            endIcon={<NavigateNext />}\n                            onClick={goToNextStep}\n                            type=\"button\"\n                        >\n                            На следующий шаг\n                        </Button>\n                    </StepButtonsContainer>\n                </StepForm>\n            </div>\n        </Step>\n    );\n};\n\nconst ForthStep = ({ goToNextStep }) => {\n    return (\n        <Step>\n            <div className=\"step-4\">\n                <StepHeader>Введите параметры</StepHeader>\n                <StepForm>\n                    <FormContentWrapper>\n                        <div>\n                            <TextField\n                                name=\"regression\"\n                                color=\"primary\"\n                                label=\"Коэффициент регуляризации\"\n                                fullWidth\n                            />\n                        </div>\n                        <div>\n                            <TextField\n                                name=\"trees\"\n                                color=\"primary\"\n                                label=\"Learning rate\"\n                                fullWidth\n                            />\n                        </div>\n                        <div>\n                            <TextField name=\"neural\" color=\"primary\" label=\"alpha\" fullWidth />\n                        </div>\n                        <div>\n                            <TextField name=\"neural\" color=\"primary\" label=\"beta\" fullWidth />\n                        </div>\n                    </FormContentWrapper>\n                    <StepButtonsContainer>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                            Выбрать\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            endIcon={<NavigateNext />}\n                            onClick={goToNextStep}\n                            type=\"button\"\n                        >\n                            На следующий шаг\n                        </Button>\n                    </StepButtonsContainer>\n                </StepForm>\n            </div>\n        </Step>\n    );\n};\n\nconst FifthStep = ({ goToNextStep }) => {\n    useEffect(() => {\n        const timeout = setTimeout(() => goToNextStep(), 2000);\n\n        return () => clearTimeout(timeout);\n    }, [goToNextStep]);\n\n    return (\n        <Step>\n            <div\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <CircularProgress style={{ marginRight: 12 }} />\n                Calculating...\n            </div>\n        </Step>\n    );\n};\n\nconst LastStep = ({ goToFirstStep }) => {\n    return (\n        <Step>\n            <img src={plotSrc} alt=\"plot\" width=\"100%\" />\n            <StepButtonsContainer>\n                <Button variant=\"contained\" color=\"primary\" onClick={goToFirstStep} type=\"button\">\n                    Начать сначала\n                </Button>\n            </StepButtonsContainer>\n        </Step>\n    );\n};\n\nfunction App() {\n    const [step, setStep] = useState(1);\n\n    const goToNextStep = () => setStep((prevStep) => ++prevStep);\n    const goToFirstStep = () => setStep(1);\n\n    console.log(step);\n\n    return (\n        <MuiThemeProvider theme={globalTheme}>\n            <div className=\"App\">\n                {step === 1 ? <FirstStep goToNextStep={goToNextStep} /> : null}\n                {step === 2 ? <SecondStep goToNextStep={goToNextStep} /> : null}\n                {step === 3 ? <ThirdStep goToNextStep={goToNextStep} /> : null}\n                {step === 4 ? <ForthStep goToNextStep={goToNextStep} /> : null}\n                {step === 5 ? <FifthStep goToNextStep={goToNextStep} /> : null}\n                {step === 6 ? <LastStep goToFirstStep={goToFirstStep} /> : null}\n            </div>\n        </MuiThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}